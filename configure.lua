local VERSION = tonumber(_VERSION:match('Lua (%d+%.%d+)'))

local function create_cfile(header, code)
    local cfile = os.tmpname() .. '.c'
    local f = assert(io.open(cfile, 'w+'))
    f:write(([[
#include <%s>
int main() {
    %s;
    return 0;
}]]):format(header, code or ''))
    f:close()
    return cfile
end

local BUFFILE = assert(os.tmpname())
local BUF = io.open(BUFFILE, 'r')

local function exec(cfile)
    local cmd = table.concat({
        'gcc',
        '-o',
        'a.out',
        cfile,
        '2>',
        BUFFILE,
    }, ' ')

    local ok = os.execute(cmd)
    os.remove(cfile)
    if VERSION < 5.2 then
        ok = ok == 0
    end

    if ok then
        os.remove('a.out')
    else
        print(BUF:read('*a'))
    end
    return ok
end

local function check_func(header, func)
    print(('check func %q'):format(func))
    local code = ('void (*function_pointer)(void) = (void (*)(void))%s'):format(
                     func)
    local cfile = create_cfile(header, code)
    return exec(cfile)
end

local function check_header(header)
    print(('check header %q'):format(header))
    local cfile = create_cfile(header)
    return exec(cfile)
end

local CONFIG_H = assert(io.open('src/config.h', 'w+'))
assert(CONFIG_H:write(([[
/**
 * this file is generated by configure.lua at %s
 */
]]):format(os.date())))

local supported = true
for header, funcs in pairs({
    ['sys/event.h'] = {
        'kevent',
    },
}) do
    local defname = header:gsub('[^%w]', '_'):upper()
    local ok = check_header(header)
    if not ok then
        supported = false
    else
        os.remove('a.out')
        assert(CONFIG_H:write(('#define %s 1\n'):format(defname)))
        for _, func in ipairs(funcs) do
            defname = func:gsub('[^%w]', '_'):upper()
            ok = check_func(header, func)
            if ok then
                os.remove('a.out')
                assert(CONFIG_H:write(('#define HAVE_%s 1\n'):format(defname)))
            else
                assert(CONFIG_H:write(('#define HAVE_%s 0\n'):format(defname)))
            end
        end
    end
end
CONFIG_H:close()
BUF:close()
os.remove(BUFFILE)

-- create symbolic link to src/ directory
local function create_symlink(srcdir)
    os.remove('./impl')
    local cmd = ('ln -sf %s impl'):format(srcdir)
    print('cretate symlink: ' .. cmd)
    assert(os.execute(cmd))
end
create_symlink(supported and 'src/' or 'nosup/')
